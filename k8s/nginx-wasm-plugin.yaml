# NGINX Ingress Controller with WASM Plugin
# This loads your Rust WASM module directly into NGINX

apiVersion: v1
kind: ConfigMap
metadata:
  name: paygress-wasm-plugin
  namespace: ingress-nginx
data:
  paygress.wasm: |
    # Base64 encoded WASM binary would go here
    # Generated from: pkg/nginx-wasm/paygress.wasm
  plugin-config.json: |
    {
      "amount": 1000,
      "enable_pod_provisioning": true,
      "cashu_mint_url": "https://mint.example.com"
    }
---
# NGINX ConfigMap with WASM configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-wasm-config
  namespace: ingress-nginx
data:
  nginx.conf: |
    # Load WASM module
    load_module modules/ngx_wasm_module.so;
    
    http {
        # WASM configuration
        wasm {
            module paygress {
                file /etc/nginx/wasm/paygress.wasm;
            }
        }
        
        server {
            listen 80;
            
            location /premium {
                # Call WASM plugin
                access_by_wasm_call paygress paygress_auth_handler;
                
                # If auth succeeds, proxy to backend
                proxy_pass http://backend;
            }
        }
    }
---
# Example ingress with WASM plugin
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: paygress-wasm-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    
    # NGINX WASM configuration
    nginx.ingress.kubernetes.io/configuration-snippet: |
      access_by_wasm_call paygress paygress_auth_handler '{"amount":1000,"enable_pod_provisioning":true}';
    
    # Custom error pages for payment required
    nginx.ingress.kubernetes.io/custom-http-errors: "402"
    nginx.ingress.kubernetes.io/default-backend: "paygress-error-pages"

spec:
  rules:
  - host: api.example.com
    http:
      paths:
      - path: /premium
        pathType: Prefix
        backend:
          service:
            name: premium-backend
            port:
              number: 80
      - path: /api/v1/premium
        pathType: Prefix
        backend:
          service:
            name: api-backend
            port:
              number: 80
---
# Error pages service for payment required responses
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paygress-error-pages
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: paygress-error-pages
  template:
    metadata:
      labels:
        app: paygress-error-pages
    spec:
      containers:
      - name: error-pages
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: error-pages
          mountPath: /usr/share/nginx/html
      volumes:
      - name: error-pages
        configMap:
          name: paygress-error-pages-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: paygress-error-pages-config
  namespace: default
data:
  402.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Payment Required</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .payment-required { color: #e74c3c; }
            .amount { font-size: 24px; font-weight: bold; }
            .instructions { margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 5px; }
        </style>
    </head>
    <body>
        <h1 class="payment-required">ðŸ’° Payment Required</h1>
        <p class="amount">1000 satoshis</p>
        <div class="instructions">
            <h3>How to pay:</h3>
            <p>Send a valid Cashu token in the <code>Authorization</code> header:</p>
            <code>Authorization: Bearer &lt;your-cashu-token&gt;</code>
        </div>
        <p>Powered by Paygress ðŸ¦€</p>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: paygress-error-pages
  namespace: default
spec:
  selector:
    app: paygress-error-pages
  ports:
  - port: 80
    targetPort: 80
