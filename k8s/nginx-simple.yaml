# Simple NGINX Ingress with Paygress Plugin
# Deploy after building: ./build-nginx.sh

apiVersion: v1
kind: ConfigMap
metadata:
  name: paygress-plugin
  namespace: ingress-nginx
data:
  # Base64 encode your nginx-plugin/paygress.so and put it here
  paygress.so: |
    # Copy the content of nginx-plugin/paygress.so here (base64 encoded)
    # Or mount as volume from build output
---
# Simple ingress configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: paygress-simple
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    
    # Simple Lua script that calls our .so
    nginx.ingress.kubernetes.io/configuration-snippet: |
      access_by_lua_block {
          -- Only apply to /premium paths
          if not string.match(ngx.var.uri, "^/premium") then
              return
          end
          
          local ffi = require("ffi")
          ffi.cdef[[
              int paygress_verify_payment(const char* token, int amount);
          ]]
          
          -- Load our plugin
          local paygress = ffi.load("/etc/nginx/modules/paygress.so")
          
          -- Get token
          local headers = ngx.req.get_headers()
          local auth = headers["authorization"] or headers["Authorization"] or ""
          local token = string.gsub(auth, "Bearer ", "")
          
          if token == "" then
              ngx.status = 402
              ngx.say('{"error":"Payment Required","amount":1000}')
              ngx.exit(402)
          end
          
          -- Verify payment
          if paygress.paygress_verify_payment(token, 1000) ~= 0 then
              ngx.status = 402
              ngx.say('{"error":"Payment Failed","amount":1000}')
              ngx.exit(402)
          end
          
          -- Success - set headers
          ngx.req.set_header("X-Payment-Verified", "true")
      }

spec:
  rules:
  - host: api.example.com
    http:
      paths:
      # Free content
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app-service
            port:
              number: 80
      
      # Premium content - requires payment
      - path: /premium
        pathType: Prefix
        backend:
          service:
            name: app-service
            port:
              number: 80
---
# Simple test app
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-app
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
    spec:
      containers:
      - name: app
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: content
          mountPath: /usr/share/nginx/html
      volumes:
      - name: content
        configMap:
          name: test-content
---
apiVersion: v1
kind: Service
metadata:
  name: app-service
  namespace: default
spec:
  selector:
    app: test-app
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-content
  namespace: default
data:
  index.html: |
    <h1>Free Content</h1>
    <p>This is accessible without payment.</p>
    <a href="/premium">Try Premium Content</a>
  premium/index.html: |
    <h1>ðŸ’Ž Premium Content</h1>
    <p>Payment verified by Rust .so plugin!</p>
    <p>Your token was validated successfully.</p>
