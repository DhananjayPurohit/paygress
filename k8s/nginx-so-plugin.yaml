# NGINX Ingress Controller with Native .so Module
# This loads your Rust .so library directly into NGINX

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-paygress-module
  namespace: ingress-nginx
data:
  # Base64 encoded .so binary
  ngx_http_paygress_module.so: |
    # This would contain the base64 encoded content of:
    # plugins/nginx/ngx_http_paygress_module.so
    
  # NGINX configuration snippet
  paygress-config.conf: |
    # Paygress module configuration
    paygress_default_amount 1000;
    paygress_enable_pod_provisioning on;
---
# Custom NGINX ConfigMap that loads our module
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  # Load our custom module
  main-snippet: |
    load_module /etc/nginx/modules/ngx_http_paygress_module.so;
    
  # Global Paygress configuration
  http-snippet: |
    # Paygress global settings
    paygress_default_amount 1000;
    paygress_enable_pod_provisioning on;
    
    # Error page for payment required
    error_page 402 @payment_required;
    location @payment_required {
        internal;
        add_header Content-Type application/json always;
        return 402 '{"error":"Payment Required","message":"Send Cashu token in Authorization header","amount":1000}';
    }
---
# Ingress that uses the native module
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: paygress-so-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    
    # Use our native module
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Call our native Rust function directly
      access_by_lua_block {
          local ffi = require("ffi")
          
          -- Load our .so module
          ffi.cdef[[
              int ngx_http_paygress_handler(void* request);
              int ngx_http_paygress_verify_payment(const char* token, int amount);
          ]]
          
          local paygress = ffi.load("/etc/nginx/modules/ngx_http_paygress_module.so")
          
          -- Get Authorization header
          local headers = ngx.req.get_headers()
          local auth_header = headers["authorization"] or headers["Authorization"]
          
          if not auth_header then
              ngx.status = 402
              ngx.say('{"error":"Payment Required","amount":1000}')
              ngx.exit(402)
          end
          
          -- Extract token
          local token = auth_header
          if string.sub(auth_header, 1, 7) == "Bearer " then
              token = string.sub(auth_header, 8)
          end
          
          -- Call our Rust verification function
          local result = paygress.ngx_http_paygress_verify_payment(token, 1000)
          
          if result ~= 0 then
              ngx.status = 402
              ngx.say('{"error":"Invalid Payment","amount":1000}')
              ngx.exit(402)
          end
          
          -- Payment verified - set headers and continue
          ngx.req.set_header("X-Payment-Verified", "true")
          ngx.req.set_header("X-Payment-Amount", "1000")
      }

spec:
  rules:
  - host: api.example.com
    http:
      paths:
      # Premium content - requires payment
      - path: /premium
        pathType: Prefix
        backend:
          service:
            name: premium-backend
            port:
              number: 80
              
      - path: /api/v1/premium
        pathType: Prefix
        backend:
          service:
            name: api-backend
            port:
              number: 80
---
# DaemonSet to install .so module on all NGINX pods
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-paygress-installer
  namespace: ingress-nginx
spec:
  selector:
    matchLabels:
      app: nginx-paygress-installer
  template:
    metadata:
      labels:
        app: nginx-paygress-installer
    spec:
      hostNetwork: true
      containers:
      - name: installer
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          # Copy .so module to NGINX modules directory
          cp /modules/ngx_http_paygress_module.so /host-modules/
          chmod 755 /host-modules/ngx_http_paygress_module.so
          
          # Keep container running
          tail -f /dev/null
          
        volumeMounts:
        - name: modules
          mountPath: /modules
        - name: host-modules
          mountPath: /host-modules
      volumes:
      - name: modules
        configMap:
          name: nginx-paygress-module
      - name: host-modules
        hostPath:
          path: /etc/nginx/modules
          type: DirectoryOrCreate
---
# Example backend services
apiVersion: apps/v1
kind: Deployment
metadata:
  name: premium-backend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: premium-backend
  template:
    metadata:
      labels:
        app: premium-backend
    spec:
      containers:
      - name: backend
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: content
          mountPath: /usr/share/nginx/html
      volumes:
      - name: content
        configMap:
          name: premium-content
---
apiVersion: v1
kind: Service
metadata:
  name: premium-backend
  namespace: default
spec:
  selector:
    app: premium-backend
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: premium-content
  namespace: default
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Premium Content - Native .so Plugin</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .premium { color: #f39c12; }
            .native { color: #e74c3c; font-weight: bold; }
        </style>
    </head>
    <body>
        <h1 class="premium">ðŸ’Ž Premium Content</h1>
        <h2 class="native">ðŸ”§ Powered by Native Rust .so Module</h2>
        <p>Your payment was verified by our <strong>native Rust library</strong>!</p>
        <p>This runs at <strong>true native speed</strong> - no WASM overhead.</p>
        <hr>
        <p><strong>Plugin Type:</strong> Native .so Library</p>
        <p><strong>Performance:</strong> âš¡ Maximum (C FFI)</p>
        <p><strong>Integration:</strong> ðŸ”— Direct NGINX Module</p>
    </body>
    </html>
