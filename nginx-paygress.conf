# Paygress NGINX Configuration Example
# Add this to your nginx.conf or include it as a separate file

# Load the Paygress module
load_module modules/ngx_http_paygress_module.so;

http {
    # Upstream for your application backend
    upstream app_backend {
        server 127.0.0.1:3000;  # Your application server
    }
    
    # Upstream for premium content backend
    upstream premium_backend {
        server 127.0.0.1:3001;  # Premium application server
    }
    
    server {
        listen 80;
        server_name your-domain.com;
        
        # Free tier - no payment required
        location / {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Premium tier - payment required
        location /premium {
            # Check for Cashu payment token
            access_by_lua_block {
                local headers = ngx.req.get_headers()
                local cashu_token = headers["x-cashu-token"]
                
                if not cashu_token then
                    ngx.status = 402
                    ngx.header["content-type"] = "application/json"
                    ngx.say('{"error": "Payment Required", "message": "Send Cashu token in X-Cashu-Token header", "amount": 1000}')
                    ngx.exit(402)
                end
                
                -- Load our Rust verification library
                local ffi = require("ffi")
                ffi.cdef[[
                    int ngx_http_paygress_verify_payment(const char* token, int amount);
                ]]
                
                local paygress = ffi.load("/etc/nginx/modules/ngx_http_paygress_module.so")
                local result = paygress.ngx_http_paygress_verify_payment(cashu_token, 1000)
                
                if result ~= 0 then
                    ngx.status = 402
                    ngx.header["content-type"] = "application/json"
                    ngx.say('{"error": "Invalid Payment", "message": "Cashu token verification failed"}')
                    ngx.exit(402)
                end
                
                -- Payment verified, continue to backend
            }
            
            proxy_pass http://premium_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Cashu-Verified "true";
        }
        
        # API endpoint for payment verification
        location /api/verify-payment {
            content_by_lua_block {
                local method = ngx.req.get_method()
                if method ~= "POST" then
                    ngx.status = 405
                    ngx.say('{"error": "Method not allowed"}')
                    return
                end
                
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                
                if not body then
                    ngx.status = 400
                    ngx.say('{"error": "Missing request body"}')
                    return
                end
                
                local cjson = require("cjson")
                local ok, data = pcall(cjson.decode, body)
                
                if not ok or not data.token or not data.amount then
                    ngx.status = 400
                    ngx.say('{"error": "Invalid JSON or missing token/amount"}')
                    return
                end
                
                -- Verify payment with our Rust library
                local ffi = require("ffi")
                ffi.cdef[[
                    int ngx_http_paygress_verify_payment(const char* token, int amount);
                ]]
                
                local paygress = ffi.load("/etc/nginx/modules/ngx_http_paygress_module.so")
                local result = paygress.ngx_http_paygress_verify_payment(data.token, data.amount)
                
                if result == 0 then
                    ngx.say('{"status": "verified", "message": "Payment verified successfully"}')
                else
                    ngx.status = 402
                    ngx.say('{"status": "failed", "message": "Payment verification failed"}')
                end
            }
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}
