# Simple NGINX Configuration with Paygress Plugin
# Copy paygress.so to /etc/nginx/modules/ first

# Load our plugin
load_module modules/paygress.so;

events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name localhost;

        # Free content - no payment required
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        # Premium content - payment required
        location /premium {
            # Check payment using our Rust plugin
            access_by_lua_block {
                local ffi = require("ffi")
                
                -- Define our Rust functions
                ffi.cdef[[
                    int paygress_verify_payment(const char* token, int amount);
                    int paygress_provision_pod(const char* namespace, const char* name);
                    const char* paygress_version();
                ]]
                
                -- Load our plugin
                local paygress = ffi.load("/etc/nginx/modules/paygress.so")
                
                -- Get Authorization header
                local headers = ngx.req.get_headers()
                local auth_header = headers["authorization"] or headers["Authorization"]
                
                if not auth_header then
                    ngx.status = 402
                    ngx.header["content-type"] = "application/json"
                    ngx.say('{"error":"Payment Required","message":"Send token in Authorization header","amount":1000}')
                    ngx.exit(402)
                end
                
                -- Extract token (remove "Bearer " if present)
                local token = auth_header
                if string.sub(auth_header, 1, 7) == "Bearer " then
                    token = string.sub(auth_header, 8)
                end
                
                -- Call our Rust function
                local result = paygress.paygress_verify_payment(token, 1000)
                
                if result ~= 0 then
                    ngx.status = 402
                    ngx.header["content-type"] = "application/json"
                    ngx.say('{"error":"Payment Failed","message":"Invalid token","amount":1000}')
                    ngx.exit(402)
                end
                
                -- Payment verified! Provision pod
                local pod_result = paygress.paygress_provision_pod("default", "user-pod-" .. ngx.time())
                
                -- Set success headers
                ngx.req.set_header("X-Payment-Verified", "true")
                ngx.req.set_header("X-Payment-Amount", "1000")
                if pod_result == 0 then
                    ngx.req.set_header("X-Pod-Provisioned", "true")
                end
            }
            
            # Serve premium content
            root /usr/share/nginx/html/premium;
            index index.html;
        }

        # API endpoint to check plugin
        location /api/plugin-info {
            content_by_lua_block {
                local ffi = require("ffi")
                ffi.cdef[[
                    const char* paygress_version();
                ]]
                
                local paygress = ffi.load("/etc/nginx/modules/paygress.so")
                local version = ffi.string(paygress.paygress_version())
                
                ngx.header["content-type"] = "application/json"
                ngx.say('{"plugin":"paygress","version":"' .. version .. '","status":"loaded"}')
            }
        }
    }
}
